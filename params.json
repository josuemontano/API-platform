{"name":"Canopus","tagline":"Pyramid & AngularJS for scalable web applications","body":"# Canopus\r\n[![Build Status](http://img.shields.io/travis/josuemontano/api-starter.svg?style=flat)](https://travis-ci.org/josuemontano/api-starter)\r\n\r\n**Live Demo:** [https://api-hanovit.rhcloud.com](https://api-hanovit.rhcloud.com)\r\n\r\n---\r\n\r\nThis project was built to provide a starting point for developing REST APIs with Pyramid and build an AngularJS around it. Happy coding!\r\n\r\n## Cool stuff...\r\n\r\nThe server is built on top of [Pyramid](http://trypyramid.com) (web development with style, indeed). Pyramid itself exposes and serves the REST resources. It makes use of [PyJWT](https://github.com/jpadilla/pyjwt) in the auth module for JSON Web Token authentication.\r\n\r\nThe front end is an AngularJS 1 application built with [Satellizer](https://github.com/sahat/satellizer), [AngularUI Router](https://github.com/angular-ui/ui-router) and [Restangular](https://github.com/mgonto/restangular).\r\n\r\n## Database\r\n\r\nBy default the project has a PostgreSQL connection configured. Change the `sqlalchemy.url` property in `development.ini` and `alembic.ini` to match your database settings. Make sure you have PostgreSQL in your PATH, psycopg2 requires it. If using [PostgresApp](http://postgresapp.com/), as I do, add these lines to your bash profile\r\n```bash\r\nexport PATH=/Applications/Postgres.app/Contents/Versions/9.4/bin:$PATH\r\nexport DYLD_LIBRARY_PATH=/Applications/Postgres.app/Contents/MacOS/lib\r\n```\r\n\r\nIt should be straightforward to make it work with the SQL database of your preference.\r\n\r\n## Running\r\nTo run it, and assuming you have a virtual enviroment `$VENV` created, just do:\r\n\r\n```bash\r\nexport JWT_SECRET='secret'\r\ncd $VENV/api-starter\r\n../bin/python setup.py develop\r\n../bin/alembic upgrade head\r\n../bin/pserve development.ini --reload\r\n```\r\n\r\nMigrations are provided by [Alembic](http://alembic.readthedocs.org), you need to run them the first time. The app will look for an env variable called `JWT_SECRET`, make sure it is properly set.\r\n\r\nYou may also deploy the app with WSGI locally using [mod_wsgi](https://modwsgi.readthedocs.org/en/master/).\r\n\r\n```bash\r\n../bin/pip install mod_wsgi\r\nmod_wsgi-express start-server wsgi.py --port 6543\r\n```\r\n\r\n## Frontend\r\n\r\nThe frontend is served by the same Pyramid app, so you don't have to run it separately on a NodeJS server or whatever. Some may argue this is not a good practice, however, due to some infraestructure limitations I often need to do it this way.\r\n\r\nGrunt tasks are set up, so install [NodeJS](http://nodejs.org) on your development computer. Then install the project dependencies:\r\n\r\n```bash\r\ncd $VENV/metropolitan\r\nnpm install\r\n```\r\n\r\nNow you're a `grunt watch` away!\r\n\r\n## OpenShift\r\n\r\nYou can deploy on [OpenShift](https://openshift.redhat.com) over HTTPS out of the box. When creating your application just fill in the Source Code field with the value: [https://github.com/josuemontano/api-starter](https://github.com/josuemontano/api-starter). All is left to you is the DB configuration, as explained before, and setting the `JWT_SECRET` variable.\r\n\r\n```bash\r\nrhc env set JWT_SECRET=secret -a app_name\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}